apiVersion: v1
kind: Namespace
metadata:
  name: search-namespace
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-data-pvc
  namespace: search-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data-pvc
  namespace: search-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-data-pvc
  namespace: search-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: search-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0-arm64
          ports:
            - containerPort: 9200
            - containerPort: 9300
          env:
            - name: node.name
              value: elasticsearch
            - name: xpack.security.enabled
              value: "false"
            - name: discovery.type
              value: single-node
          resources:
            limits:
              memory: "4Gi"
            requests:
              memory: "2Gi"
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          volumeMounts:
            - name: elasticsearch-data
              mountPath: /usr/share/elasticsearch/data
          livenessProbe:
            httpGet:
              path: /
              port: 9200
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 9200
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: elasticsearch-data
          persistentVolumeClaim:
            claimName: elasticsearch-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: search-namespace
spec:
  type: ClusterIP
  ports:
    - port: 9200
      targetPort: 9200
      name: http
    - port: 9300
      targetPort: 9300
      name: transport
  selector:
    app: elasticsearch
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: search-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana:8.13.0-arm64
          ports:
            - containerPort: 5601
          env:
            - name: ELASTICSEARCH_HOSTS
              value: http://elasticsearch:9200
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: search-namespace
spec:
  type: NodePort
  ports:
    - port: 5601
      targetPort: 5601
      nodePort: 30601
  selector:
    app: kibana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: search-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:6.0
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: search-namespace
spec:
  type: ClusterIP
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongodb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: search-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: atlas
            - name: RABBITMQ_DEFAULT_PASS
              value: password
            - name: RABBITMQ_ERLANG_COOKIE
              value: mysecretcookie
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
      volumes:
        - name: rabbitmq-data
          persistentVolumeClaim:
            claimName: rabbitmq-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: search-namespace
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: management
      port: 15672
      targetPort: 15672
  selector:
    app: rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-service
  namespace: search-namespace
spec:
  replicas: 2
  selector:
    matchLabels:
      app: search-service
  template:
    metadata:
      labels:
        app: search-service
    spec:
      containers:
        - name: search-service
          image: search-service:latest
          imagePullPolicy: Never # only use local image
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config-volume
              mountPath: /data/search-service/config/
      volumes:
        - name: config-volume
          configMap:
            name: search-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: search-service
  namespace: search-namespace
spec:
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: search-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: search-namespace
  name: configmap-reader
rules:
  - apiGroups: [""]
    resources: ["configmaps", "pods"] # for local use, can be separated and more specific
    verbs: ["get", "list", "watch", "create"] # for local use, can be separated and more specific
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-configmaps
  namespace: search-namespace
subjects:
  - kind: ServiceAccount
    name: default # Or the name of your service account
    namespace: search-namespace
roleRef:
  kind: Role
  name: configmap-reader
  apiGroup: rbac.authorization.k8s.io
